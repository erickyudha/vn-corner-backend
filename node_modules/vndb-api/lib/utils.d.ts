/**
 * Represents a general Response object, can have varying types of properties depending on the request.
 * @see {@link https://vndb.org/d11}
 */
export interface VNDBResponse {
    status?: string;
    searchType?: string;
    [key: string]: any;
}
/**
 * Represents an Error Response object.
 */
export interface VNDBError extends VNDBResponse {
    id?: string;
    msg?: string;
    fullwait?: number;
    field?: string;
}
/**
 * Return a similar object but with all null or undefined properties removed.
 * @param obj The object to be filtered
 */
export declare function filterObject(obj: object | undefined): object;
/**
 * Just a helper export function to wait for a certain amount of time.
 * @param duration Amount of time to wait for (in milliseconds)
 */
export declare function wait(duration: number): Promise<void>;
/**
 * Converts the raw response to JSON and adds the status and search type to response object.
 * @param query The query string
 * @param response THe raw response from VNDB
 * @return Response in JSON form
 */
export declare function parseResponse(query: string, response: string): VNDBResponse;
/**
 * Utility to convert API errors to valid JSON format, only used for connection/login errors, query errors are handled by [[parseResponse]].
 * @param error The raw error response
 * @return Error object
 */
export declare function errorParser(error: string): VNDBError;
