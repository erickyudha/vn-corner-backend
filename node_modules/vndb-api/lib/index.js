"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var tarn_1 = require("tarn");
var limiter_1 = require("limiter");
var utils_1 = require("./utils");
var connection_1 = __importDefault(require("./connection"));
/**
 * @hidden
 * The default connection options, allows 10 requests per 30 seconds and 1 to 10 connections, you can them by passing your own connection options
 */
var defaultOptions = {
    host: 'api.vndb.org',
    port: 19535,
    encoding: 'utf-8',
    queryLimit: 10,
    queryInterval: 30000,
    minConnection: 1,
    maxConnection: 10,
    idleTimeoutMillis: 30000,
    acquireTimeout: 30000,
    propagateCreateError: false,
};
/**
 * Represents the main VNDB API client.
 * Uses Rate Limiting and Connection Pooling for maximum efficiency according to the limits described by the VNDB API.
 * @see {@link https://vndb.org/d11}
 */
var VNDB = /** @class */ (function () {
    /**
     * Creates a new VNDB client.
     * @param clientName A custom name used to identify the client connecting to the API
     * @param options Connection options used to connect to the API, defaults will be used for any option not provided
     */
    function VNDB(clientName, options) {
        var _this = this;
        // Update any custom provided options
        options = utils_1.filterObject(options);
        this.options = __assign(__assign({}, defaultOptions), options);
        // Create a rate limiter
        this.limiter = new limiter_1.RateLimiter(this.options.queryLimit, this.options.queryInterval);
        // Create a connection pool
        this.pool = new tarn_1.Pool({
            create: function () {
                return new Promise(function (resolve, reject) {
                    var conn = new connection_1.default();
                    conn // first connect to the API
                        .connect(_this.options.host, _this.options.port, _this.options.encoding)
                        .then(function () {
                        conn // then login using the provided client name
                            .login(clientName)
                            .then(function () {
                            resolve(conn);
                        })
                            .catch(function (e) {
                            reject(e);
                        });
                    })
                        .catch(function (e) {
                        reject(e);
                    });
                });
            },
            destroy: function (conn) {
                return conn.disconnect();
            },
            max: this.options.maxConnection,
            min: this.options.minConnection,
            idleTimeoutMillis: this.options.idleTimeoutMillis,
            acquireTimeoutMillis: this.options.acquireTimeout,
            propagateCreateError: this.options.propagateCreateError,
        });
        // Adds an event listener to the pool, if any resource creation fails, stores the reason in this.error
        this.pool.on('createFail', function (id, err) {
            _this.error = err;
        });
    }
    /**
     * Send a query to the VNDB API by creating a [[VNDBConnection]].
     * @param query A VNDB API compatible query string
     * @see {@link https://vndb.org/d11}
     * @return Resolves when the response is recieved
     */
    VNDB.prototype.query = function (query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.limiter.removeTokens(1, function () {
                _this.pool
                    .acquire() // get a connection from the pool
                    .promise.then(function (conn) {
                    conn
                        .query(query)
                        .then(function (response) {
                        _this.pool.release(conn);
                        resolve(response);
                    })
                        .catch(function (e) {
                        _this.pool.release(conn);
                        reject(e);
                    });
                })
                    .catch(function (e) {
                    if (e instanceof tarn_1.TimeoutError) {
                        // If error is due to timeout
                        if (_this.error == undefined) {
                            reject({
                                code: 'CONTIMEOUT',
                                message: 'Connection timed out',
                                status: 'error',
                            });
                        }
                        // otherwise error occured during creation of connection,
                        // so use the error from this.error set by event
                        reject(_this.error);
                    }
                    // else it's a query related API error, only happens if propagateCreateError is set to true
                    reject(e);
                });
            });
        });
    };
    /**
     * Destroy this client and close any open connections.
     * @return Resolves when the client is destroyed
     */
    VNDB.prototype.destroy = function () {
        return this.pool.destroy();
    };
    return VNDB;
}());
module.exports = VNDB;
