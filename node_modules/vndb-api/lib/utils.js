"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Return a similar object but with all null or undefined properties removed.
 * @param obj The object to be filtered
 */
function filterObject(obj) {
    if (obj == undefined) {
        return {};
    }
    return Object.entries(obj).reduce(function (acc, _a) {
        var _b;
        var k = _a[0], v = _a[1];
        return (v == null ? acc : __assign(__assign({}, acc), (_b = {}, _b[k] = v, _b)));
    }, {});
}
exports.filterObject = filterObject;
/**
 * Just a helper export function to wait for a certain amount of time.
 * @param duration Amount of time to wait for (in milliseconds)
 */
function wait(duration) {
    return new Promise(function (resolve) {
        setTimeout(resolve, duration);
    });
}
exports.wait = wait;
/**
 * Converts the raw response to JSON and adds the status and search type to response object.
 * @param query The query string
 * @param response THe raw response from VNDB
 * @return Response in JSON form
 */
function parseResponse(query, response) {
    var _a;
    var status = response.match(/(\S+) {/)[1];
    var rawBody = response.match(/{.+}/)[0];
    var body = JSON.parse(rawBody);
    body.status = status;
    if (status == 'error') {
        body.searchType = query;
        body.code = (_a = body.id) === null || _a === void 0 ? void 0 : _a.toUpperCase();
    }
    else if (status == 'dbstats') {
        body.searchType = 'dbstats';
    }
    else {
        // using 4 because currently only get requests are supported
        var searchType = query.substring(4, query.indexOf(' ', 4));
        body.searchType = searchType;
    }
    return body;
}
exports.parseResponse = parseResponse;
/**
 * Utility to convert API errors to valid JSON format, only used for connection/login errors, query errors are handled by [[parseResponse]].
 * @param error The raw error response
 * @return Error object
 */
function errorParser(error) {
    var status = error.match(/(\S+) {/)[1];
    var rawBody = error.match(/{.+}/)[0];
    var body = JSON.parse(rawBody);
    body.status = status;
    return body;
}
exports.errorParser = errorParser;
