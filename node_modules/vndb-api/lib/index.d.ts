import { Pool } from 'tarn';
import { RateLimiter } from 'limiter';
import { VNDBResponse } from './utils';
import VNDBConnection from './connection';
import { PromiseInspection } from 'tarn/lib/PromiseInspection';
/**
 * An object that contains the various connection options used to connect to the VNDB API
 */
interface ConnectionOptions {
    /**
     * The VNDB API hostname
     * @default api.vndb.org
     */
    host?: string;
    /**
     * The VNDB API port (use the TLS port)
     * @default 19535
     */
    port?: number;
    /**
     * The encoding to use
     * @default utf-8
     */
    encoding?: string;
    /**
     * The max number of queries allowed to send per [[queryInterval]] milliseconds
     * @default 10
     */
    queryLimit?: number;
    /**
     * The time limit in which at most [[queryLimit]] queries are allowed to send (in milliseconds)
     * @default 30000
     */
    queryInterval?: number;
    /**
     * The minimum number of connections to the API to keep in the pool
     * @default 1
     */
    minConnection?: number;
    /**
     * The maximum number of connections to the API allowed
     * @default 10
     */
    maxConnection?: number;
    /**
     * Unused/Free connections in the pool are destroyed after this many milliseconds
     * @default 30000
     */
    idleTimeoutMillis?: number;
    /**
     * If a connection is not established within this many milliseconds, an error with the corresponding reason is generated
     * @default 30000
     */
    acquireTimeout?: number;
    /**
     * If this is true, then the client errors out the first time unable to establish a connection and does not retry.
     * If this is false, then the client will retry for [[acquireTimeout]] milliseconds to establish a connection
     */
    propagateCreateError?: boolean;
}
/**
 * Represents the main VNDB API client.
 * Uses Rate Limiting and Connection Pooling for maximum efficiency according to the limits described by the VNDB API.
 * @see {@link https://vndb.org/d11}
 */
declare class VNDB {
    /** The connection options used to connect to the API */
    options: ConnectionOptions;
    /** Used to rate limit the queries sent to the VNDB API to prevent overloading */
    limiter: RateLimiter;
    /** A pool of connections to the API */
    pool: Pool<VNDBConnection>;
    /**
     * @hidden
     * Used to store the error object for any error during creation of a connection
     */
    private error;
    /**
     * Creates a new VNDB client.
     * @param clientName A custom name used to identify the client connecting to the API
     * @param options Connection options used to connect to the API, defaults will be used for any option not provided
     */
    constructor(clientName: string, options?: ConnectionOptions);
    /**
     * Send a query to the VNDB API by creating a [[VNDBConnection]].
     * @param query A VNDB API compatible query string
     * @see {@link https://vndb.org/d11}
     * @return Resolves when the response is recieved
     */
    query(query: string): Promise<VNDBResponse>;
    /**
     * Destroy this client and close any open connections.
     * @return Resolves when the client is destroyed
     */
    destroy(): Promise<PromiseInspection<{}> | PromiseInspection<void>>;
}
export = VNDB;
